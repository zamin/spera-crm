<?php

/**

 * ClassName: My_Controller

 * Function Name: __construct

 * This class is the core class of the site where we set user data, active users

 **/

class My_Controller extends CI_Controller {



    var $user = FALSE;

    var $client = FALSE;

    var $core_settings = FALSE;

    // Theme functionality

    protected $theme_view = 'application';

    protected $content_view = '';

    protected $view_data = array();



	/* Construct function is used to set core settings related to modules permission, language options, user details and user access

	 */

    function __construct() {

        

        parent::__construct();

        

        /*if($this->uri->segment(3) && is_numeric($this->uri->segment(3)))

        {

            $this->cid = $this->uri->segment(3);

        }

        else if($this->uri->segment(2) && is_numeric($this->uri->segment(2)))

        {

            $this->cid = $this->uri->segment(2);

        }

        else*/ if($this->uri->segment(1) && is_numeric($this->uri->segment(1)))

        {

            $this->cid = $this->uri->segment(1);

        }

        else

        {

            $this->cid = 0;

        }

        /*if($_POST) {

			echo '<pre>';print_r($_POST);

			echo '<br> Session';

			print_r($this->session->userdata);



		}*/

		

        if (!empty($_POST)) {



            $fieldList = array("description", "message", "terms", "note", "invoice_terms", "estimate_terms", "bank_transfer_text");



            function remove_bad_tags_from($field) {

                $_POST[$field] = preg_replace('/(&lt;|<)\?php(.*)(\?(&gt;|>))/imx', '[php] $2 [php]', $_POST[$field]);

                $_POST[$field] = preg_replace('/((&lt;|<)(\s*|\/)script(.*?)(&gt;|>))/imx', ' [script] ', $_POST[$field]);

                $_POST[$field] = preg_replace('/((&lt;|<)(\s*)link(.*?)\/?(&gt;|>))/imx', '[link $4 ]', $_POST[$field]);

                $_POST[$field] = preg_replace('/((&lt;|<)(\s*)(\/*)(\s*)style(.*?)(&gt;|>))/imx', ' [style] ', $_POST[$field]);

            }



            foreach ($_POST as $key => $value) {

                if (in_array($key, $fieldList)) {

                    remove_bad_tags_from($key);

                } else {

                    $_POST[$key] = $this->security->xss_clean($_POST[$key]);

                }

            }

        }

        $this->view_data['core_settings'] = Setting::first();

        $this->view_data['datetime'] = date('Y-m-d H:i', time());

        $date = date('Y-m-d', time());



        //Languages

        if ($this->input->cookie('fc2language') != "") {

            $language = $this->input->cookie('fc2language');

        } else {

            if (isset($this->view_data['language'])) {

                $language = $this->view_data['language'];

            } else {

                if (!empty($this->view_data['core_settings']->language)) {

                    $language = $this->view_data['core_settings']->language;

                } else {

                    $language = "english";

                }

            }

        }

        $this->view_data['time24hours'] = "true";

        switch ($language) {



            case "english": $this->view_data['langshort'] = "en";

                $this->view_data['timeformat'] = "h:i K";

                $this->view_data['dateformat'] = "F j, Y";

                $this->view_data['time24hours'] = "false";

                break;

            case "dutch": $this->view_data['langshort'] = "nl";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d-m-Y";

                break;

            case "french": $this->view_data['langshort'] = "fr";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d-m-Y";

                break;

            case "german": $this->view_data['langshort'] = "de";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d.m.Y";

                break;

            case "italian": $this->view_data['langshort'] = "it";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d/m/Y";

                break;

            case "norwegian": $this->view_data['langshort'] = "no";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d.m.Y";

                break;

            case "polish": $this->view_data['langshort'] = "pl";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d.m.Y";

                break;

            case "portuguese": $this->view_data['langshort'] = "pt";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d/m/Y";

                break;

            case "portuguese_pt": $this->view_data['langshort'] = "pt";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d/m/Y";

                break;

            case "russian": $this->view_data['langshort'] = "ru";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d.m.Y";

                break;

            case "spanish": $this->view_data['langshort'] = "es";

                $this->view_data['timeformat'] = "H:i";

                $this->view_data['dateformat'] = "d/m/Y";

                break;

            default: $this->view_data['langshort'] = "en";

                $this->view_data['timeformat'] = "h:i K";

                $this->view_data['dateformat'] = "F j, Y";

                $this->view_data['time24hours'] = "false";

                break;

        }



        //fetch installed languages

        $installed_languages = array();

        if ($handle = opendir('application/language/')) {

            while (false !== ($entry = readdir($handle))) {

                if ($entry != "." && $entry != "..") {

                    array_push($installed_languages, $entry);

                }

            }

            closedir($handle);

        }



        $this->lang->load('application', $language);

        $this->lang->load('messages', $language);

        $this->lang->load('event', $language);

        $this->view_data['current_language'] = $language;

        $this->view_data['installed_languages'] = $installed_languages;



        //userdata

        

        if($this->cid)

        {

            $this->sessionArr = $this->session->userdata[$this->cid];

            $this->view_data['settings']=CompanyDetails::find_by_company_id($this->cid);

            //echo "<pre>";print_r($this->view_data['settings']);exit;

        }

        else

        {

            $this->sessionArr = $this->session->userdata;

        }

        //echo "<pre>";print_r($this->sessionArr);exit;

        $this->user = $this->sessionArr['user_id'] ? User::find_by_id($this->sessionArr['user_id']) : FALSE;

        

        if ($this->user) {



            //check if user or client

            if ($this->user) {

                $access = $this->user->access;

                $access = explode(",", $access);

                

                $update = $this->user;

                $email = 'u' . $this->user->id;

                $userIsSuperAdmin = ($this->user->admin == '1') ? true : false;

                $comp_array=array();

                /*$user_role = UserRole::find_by_user_id($this->user->id);



                //menus and views by user roles

                /*if (!empty($user_role) && $user_role->role_id == 2) {

                    $this->theme_view = 'application_owner';

                    $access = $this->user->access;

                    $access = explode(",", $access);

                    $email = 'ao' . $this->user->id;

                    $this->view_data['menu'] = Module::find('all', array('order' => 'sort asc', 'conditions' => array('id in (?) AND type = ?', $access, 'account-owner')));

                    $update = User::find($this->user->id);

                    $this->view_data['module_permissions'] = array();

                    foreach ($this->view_data['menu'] as $key => $value) {

                        array_push($this->view_data['module_permissions'], $value->link);

                    }

                    //$this->view_data['estimates_new'] = Invoice::find_by_sql("select count(id) as amount from invoices where (`estimate_status`='Sent' or `estimate_status`='Revised') and company_id =" . $this->user->company_id);

                

                } elseif (!empty($user_role) && $user_role->role_id == 3) {



					$this->theme_view = 'application_client';

                    $access = $this->user->access;

                    $access = explode(",", $access);

                    $email = 'c' . $this->user->id;

                    $this->view_data['menu'] = Module::find('all', array('order' => 'sort asc', 'conditions' => array('id in (?) AND type = ?', $access, 'client')));

                    $update = User::find($this->user->id);

                    $this->view_data['module_permissions'] = array();

                    foreach ($this->view_data['menu'] as $key => $value) {

                        array_push($this->view_data['module_permissions'], $value->link);

                    }

                    //$this->view_data['estimates_new'] = Invoice::find_by_sql("select count(id) as amount from invoices where (`estimate_status`='Sent' or `estimate_status`='Revised') and company_id =" . $this->user->company_id);

                } elseif (!empty($user_role) && $user_role->role_id == 4) {



                    $this->theme_view = 'application_sub_contractor';

                    $access = $this->user->access;

                    $access = explode(",", $access);

                    $email = 'sc' . $this->user->id;

                    $this->view_data['menu'] = Module::find('all', array('order' => 'sort asc', 'conditions' => array('id in (?) AND type = ?', $access, 'sub-contractor')));

                    $update = User::find($this->user->id);

                    $this->view_data['module_permissions'] = array();

                    foreach ($this->view_data['menu'] as $key => $value) {

                        array_push($this->view_data['module_permissions'], $value->link);

                    }

                    //$this->view_data['estimates_new'] = Invoice::find_by_sql("select count(id) as amount from invoices where (`estimate_status`='Sent' or `estimate_status`='Revised') and company_id =" . $this->user->company_id);



                } else {*/

                    $this->view_data['menu'] = Module::find('all', array('order' => 'sort asc', 'conditions' => array('id in (?) AND type = ?', $access, 'main')));

                    //echo Module::connection()->last_query;

                    //echo "<pre>";print_r($this->view_data['menu']);exit;

                    $this->view_data['module_permissions'] = array();

                    $notification_list = array();

                    foreach ($this->view_data['menu'] as $key => $value) {

                        array_push($this->view_data['module_permissions'], $value->link);

                    }



                    $this->view_data['widgets'] = Module::find('all', array('conditions' => array('id in (?) AND type = ?', $access, 'widget')));

                    $this->view_data['user_online'] = User::all(array('conditions' => array('last_active+(30 * 60) > ? AND status = ?', time(), "active")));



                    $this->view_data['quotations_new'] = Quote::count(array('conditions' => array('status = ?', "New")));

                    $this->view_data['quotations_new'] = $this->view_data['quotations_new'] + Quoterequest::count(array('conditions' => array('status = ?', "New")));



                    $this->view_data['sticky'] = Project::find_by_sql("select distinct(projects.name), projects.id, projects.tracking, projects.progress from projects, project_has_workers where projects.sticky = 1 AND projects.id = project_has_workers.project_id AND project_has_workers.user_id=" . $this->user->id);



                    $this->view_data['tickets_access'] = false;

                    if (in_array("tickets", $this->view_data['module_permissions'])) {

                        $this->view_data['tickets_access'] = true;

                        $this->view_data['tickets_new'] = Ticket::newTicketCount($this->user->id, $comp_array);

                    }



                    if (in_array("invoices", $this->view_data['module_permissions'])) {

                        $overdueInvoices = Invoice::overdueByDate($comp_array, $date);

                        foreach ($overdueInvoices as $key => $value) {

                            $line = str_replace("{invoice_number}", '<a href="' . base_url() . 'invoices/view/' . $value->id . '">#' . $this->view_data['core_settings']->invoice_prefix . $value->reference . '</a>', $this->lang->line('event_invoice_overdue'));

                            $notification_list[$value->due_date . "." . $value->id] = $line;

                        }

                    }

                    if (in_array("subscriptions", $this->view_data['module_permissions'])) {

                        $outstandingInvoices = Subscription::newInvoiceOutstanding($comp_array, $date);

                        foreach ($outstandingInvoices as $key2 => $value2) {

                            $eventline = str_replace("{subscription_number}", '<a href="' . base_url() . 'subscriptions/view/' . $value2->id . '">#' . $this->view_data['core_settings']->subscription_prefix . $value2->reference . '</a>', $this->lang->line('event_subscription_new_invoice'));

                            $notification_list[$value2->next_payment . "." . $value2->id] = $eventline;

                        }

                    }



                    if (in_array("projects", $this->view_data['module_permissions'])) {

                        $overdueProjects = Project::overdueByDate($this->user->id, $comp_array, $date);

                        //task notification

                        $this->view_data['projects_icon'] = true;

                        $this->view_data['task_notifications'] = ProjectHasTask::find('all', array('conditions' => array('user_id = ? AND tracking != ?', $this->user->id, 0)));

                        foreach ($overdueProjects as $key2 => $value2) {

                            if ($this->user->admin == 0) {

                                $sql = "SELECT id FROM `project_has_workers` WHERE project_id = " . $value->id . " AND user_id = " . $this->user->id;

                                $res = Project::find_by_sql($sql);

                                //$res = $query;

                                if ($res) {

                                    $eventline = str_replace("{project_number}", '<a href="' . base_url() . 'projects/view/' . $value2->id . '">#' . $this->view_data['core_settings']->project_prefix . $value2->reference . '</a>', $this->lang->line('event_project_overdue'));

                                    $notification_list[$value2->end . "." . $value2->id] = $eventline;

                                }

                            } else {

                                $eventline = str_replace("{project_number}", '<a href="' . base_url() . 'projects/view/' . $value2->id . '">#' . $this->view_data['core_settings']->project_prefix . $value2->reference . '</a>', $this->lang->line('event_project_overdue'));

                                $notification_list[$value2->end . "." . $value2->id] = $eventline;

                            }

                        }

                    }



                    krsort($notification_list);

                    $this->view_data["notification_list"] = $notification_list;

                    $this->view_data["notification_count"] = count($notification_list);



            }



            //Update user last active

            $update->last_active = time();

            $update->save();



           /* $this->view_data['messages_new'] = Privatemessage::find_by_sql("select count(id) as amount from privatemessages where `status`='New' AND recipient = '" . $email . "'");*/

           

            $this->view_data['messages_new'] = Privatemessage::find_by_sql("select count(id) as amount from privatemessages where `status`='New' AND privatemessages.receiver_delete != 1 AND recipient = '" . $email . "'");

            $this->view_data['quotation_new'] = Quote::find_by_sql("select count(id) as amount from quotations where `status`='New'");

            $this->view_data['custom_quotation_new'] = Quoterequest::find_by_sql("select count(id) as amount from custom_quotation_requests where `status`='New'");

            if( $this->sessionArr['role_id'] == 2 && stripos($_SERVER["REQUEST_URI"],'/aosubscriptions')===false)

            {

                $this->load->database();

                $user_current_subscriptions = $this->db->query('SELECT * FROM propay_user_subscription WHERE user_id = '.$this->sessionArr['user_id'].' AND status = 0')->result_array();

                if(empty($user_current_subscriptions))

                {

                    $this->session->set_flashdata('message', 'error:Your subscription is expired please subscribe your account!');

                    redirect('aosubscriptions/');

                    exit;

                }

                else

                {

                    $user_check_current = $this->db->query("SELECT * FROM propay_user_subscription 

                                                            WHERE id = ".$user_current_subscriptions[0]['id']." AND end_date >= '".date('Y-m-d',strtotime('now'))."'")->result_array();

                    if( empty($user_check_current) )

                    {

                        $this->session->set_flashdata('message', 'error:Your subscription is expired please subscribe your account!');

                        redirect('aosubscriptions/');

                        exit;

                    }

                }

            }

        }

        

        $this->view_data["note_templates"] = ""; //$query->result();

    }



    public function _output($output) {

        // set the default content view

        if ($this->content_view !== FALSE && empty($this->content_view))

            $this->content_view = $this->router->class . '/' . $this->router->method;

        //render the content view

        $yield = file_exists(APPPATH . 'views/' . $this->view_data['core_settings']->template . '/' . $this->content_view . EXT) ? $this->load->view($this->view_data['core_settings']->template . '/' . $this->content_view, $this->view_data, TRUE) : FALSE;



        //render the theme

        if ($this->theme_view)

            echo $this->load->view($this->view_data['core_settings']->template . '/' . 'theme/' . $this->theme_view, array('yield' => $yield), TRUE);

        else

            echo $yield;



        echo $output;

    }



}

