<?php
/**
 * ClassName: Account Owner Dashboard
 * Function Name: index 
 * This class is used for account owner dashboard
 **/
if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Aodashboard extends MY_Controller {

    function __construct() {
        parent::__construct();
        $access = FALSE;
        $this->view_data['update'] = FALSE;
        if ($this->user) {
            if(in_array("aodashboard", $this->view_data['module_permissions'])){
                    $access = TRUE;
            }
            if(!$access && !empty($this->view_data['menu'][0])){
                    redirect($this->view_data['menu'][0]->link);
            }elseif(empty($this->view_data['menu'][0])){
                    $this->view_data['error'] = "true";
                    $this->session->set_flashdata('message', 'error: You have no access to any modules!');
                    redirect('login');
            }
        } else {
            redirect('login');
        }

        //Events
        $events = array();
        $date = date('Y-m-d', time());
        $eventcount = 0;

        if (in_array("messages", $this->view_data['module_permissions'])) {
            $sql = 'SELECT privatemessages.id, privatemessages.`status`, privatemessages.subject, privatemessages.message, privatemessages.`time`, privatemessages.`recipient`,  users.`userpic` as userpic_u  , users.`email` as email_u , CONCAT(users.firstname," ", users.lastname) as sender_u
							FROM privatemessages
							LEFT JOIN users ON CONCAT("u",users.id) = privatemessages.sender 
							GROUP by privatemessages.id HAVING privatemessages.recipient = "u' . $this->user->id . '"AND privatemessages.status != "deleted" ORDER BY privatemessages.`time` DESC LIMIT 6';
            $query = Privatemessage::find_by_sql($sql);
            $this->view_data["message"] = array_filter($query);
        }
        if (in_array("aoprojects", $this->view_data['module_permissions'])) {
            $sql = 'SELECT * FROM project_has_tasks l left join user_roles r on l.user_id=r.user_id WHERE status != "done" AND user_id = "' . $this->user->id . '" and r.role_id="' . $this->session->userdata('role_id') . '" ORDER BY project_id';
            $taskquery = ProjectHasTask::find_by_sql($sql);
            if (empty($taskquery)) {
                $this->view_data["tasks"] = $taskquery;
            }
        }
    }

    function year($year = FALSE) {
        $this->index($year);
    }

    function index($year = FALSE) {
        if (!$year) {
            $year = date('Y', time());
        }
        $currentYearMonth = date('Y-m', time());
        $thismonth = date('m');
        $yearMonth = $year . '-' . $thismonth;
        // Projects Stats
        $open_projects = Project::find_by_sql('SELECT count(*) as opcount FROM user_roles r RIGHT JOIN projects p ON r.company_id = p.company_id WHERE r.user_id = "' . $this->user->id . '" and progress < 100 and r.role_id = 4');
        if (!empty($open_projects[0]->opcount)) {
            $this->view_data["projects_open"] = $open_projects[0]->opcount;
        } else {
            $this->view_data["projects_open"] = 0;
        }

        $all_projects = Project::find_by_sql('SELECT count(*) as pcount FROM user_roles r RIGHT JOIN projects p ON r.company_id = p.company_id WHERE r.user_id = "' . $this->user->id . '" and r.role_id = 4');
        //var_dump($all_projects);exit;
        if (!empty($all_projects[0]->pcount)) {
            $this->view_data["projects_all"] = $all_projects[0]->pcount;
        } else {
            $this->view_data["projects_all"] = 0;
        }
        
        // Invoices Stats	
        $this->view_data["invoices_open"] = Invoice::count(array('conditions' => array('status != ? AND status != ? AND estimate != ? AND user_id = ?', 'Paid', 'Canceled', 1, $this->user->id))); // Get all but canceled and Paid invoices
        $this->view_data["invoices_all"] = Invoice::count(array('conditions' => array('status != ? AND estimate != ? AND user_id = ?', 'Canceled', 1, $this->user->id))); // Get all but canceled invoices

        $this->view_data["stats"] = Invoice::getStatisticForYearByUserId($this->user->id, $year);
        //var_dump($this->view_data["stats"]);exit;
        $this->view_data["stats_expenses"] = Invoice::getExpensesStatisticForYearByUserId($this->user->id, $year);
        $this->view_data["payments"] = Invoice::paymentsForMonthByUserId($this->user->id, $currentYearMonth);
        $this->view_data["paymentsOutstandingMonth"] = Invoice::outstandingPaymentsByUserId($this->user->id, $currentYearMonth);
        //var_dump($this->view_data["paymentsOutstandingMonth"]);exit;
        $this->view_data["paymentsoutstanding"] = Invoice::outstandingPaymentsByUserId($this->user->id);
        $this->view_data["totalExpenses"] = Invoice::totalExpensesForYearByUserId($this->user->id, $year);
        $this->view_data["totalIncomeForYear"] = Invoice::totalIncomeForYearByUserId($this->user->id, $year);
        $this->view_data["totalProfit"] = $this->view_data["totalIncomeForYear"] - $this->view_data["totalExpenses"];
        $this->view_data["paymentsForThisMonthInPercent"] = ($this->view_data["payments"] == 0) ? 0 : @round($this->view_data["payments"] / $this->view_data["paymentsOutstandingMonth"] * 100);
        $this->view_data["openProjectsPercent"] = ($this->view_data["projects_open"] == 0) ? 0 : @round($this->view_data["projects_open"] / $this->view_data["projects_all"] * 100);
        $this->view_data["openInvoicePercent"] = ($this->view_data["invoices_open"] == 0) ? 0 : @round($this->view_data["invoices_open"] / $this->view_data["invoices_all"] * 100);
        $this->view_data["paymentsOutstandingPercent"] = ($this->view_data["paymentsoutstanding"] == 0) ? 0 : @round($this->view_data["paymentsoutstanding"] / $this->view_data["totalIncomeForYear"] * 100);
        $this->view_data["paymentsOutstandingPercent"] = ($this->view_data["paymentsOutstandingPercent"] > 100) ? 100 : $this->view_data["paymentsOutstandingPercent"];

        $this->content_view = 'dashboard/aodashboard';
    }

}
